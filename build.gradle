plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'war'
}

group = 'easylab'
version = '0.0.1-SNAPSHOT'

ext {
    querydslVersion = "5.0.0"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // 필수: Spring Boot 설정 메타데이터 인식용
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-hibernate5'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:2.7.4'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'at.favre.lib:bcrypt:0.10.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    // Querydsl
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api:2.1.1"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api:3.1.0"
}

// generated sources 설정
def querydslDir = layout.buildDirectory.dir("generated/querydsl").get().asFile

sourceSets {
    main {
        java {
            srcDirs += querydslDir
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

tasks.named('test') {
    useJUnitPlatform()
}


def frontendDir = "$projectDir/src/frontend/front"

sourceSets {
    main {
        resources { srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
    // 로컬 환경인지 확인하는 조건 (기본 로직: 'local' 프로필이면 스킵)
    def isLocalEnvironment = System.getProperty("spring.profiles.active", "local") == "local"

    // 로컬 환경이면 작업 건너뛰기
   onlyIf { !isLocalEnvironment }

    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"

    // 로컬 환경인지 확인하는 조건
    def isLocalEnvironment = System.getProperty("spring.profiles.active", "local") == "local"

    // 로컬 환경이면 작업 건너뛰기
    onlyIf { !isLocalEnvironment }

    workingDir "$frontendDir"
    inputs.dir "$frontendDir"
    group = BasePlugin.BUILD_GROUP
    def profile = System.getProperty("spring.profiles.active", "dev")

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        if (profile == "prod") {
            commandLine "cmd", "/c", "set NODE_ENV=production && set REACT_APP_SPRING_PROFILE=prod && npm run build:prod"
        } else {
            commandLine "cmd", "/c", "set NODE_ENV=development && set REACT_APP_SPRING_PROFILE=dev && npm run build:dev"
        }
    } else {
        if (profile == "prod") {
            commandLine "sh", "-c", "NODE_ENV=production REACT_APP_SPRING_PROFILE=prod npm run build:prod"
        } else {
            commandLine "sh", "-c", "NODE_ENV=development REACT_APP_SPRING_PROFILE=dev npm run build:dev"
        }
    }

    standardOutput = System.out
    errorOutput = System.err
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"

    // 로컬 환경인지 확인하는 조건
    def isLocalEnvironment = System.getProperty("spring.profiles.active", "local") == "local"

    // 로컬 환경이면 작업 건너뛰기
    onlyIf { !isLocalEnvironment }

    from "$frontendDir/build"
    into "$projectDir/src/main/resources/static"
}